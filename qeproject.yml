pipeline:
  agent:
    label: 'your-label-here'  # Replace with your Jenkins agent label or 'any' for any available agent

  tools:
    maven: 'Maven'  # Specify the Maven installation configured in Jenkins Global Tool Configuration

  parameters:
    - string:
        name: 'tag'
        defaultValue: 'APITesting'
        description: 'Tag to be used for the job'

    - string:
        name: 'testrunid'
        defaultValue: ''
        description: 'Test run ID (optional)'

    - string:
        name: 'reportPath'
        defaultValue: ''
        description: 'Path for test report'

  environment:
    TEST_ENVIRONMENT: "${TestEnvironment}"

  options:
    skipDefaultCheckout: true  # Skip default checkout to manually configure Git

  stages:
    - stage: 'Setup'
      steps:
        - script:
            name: 'Setup Java'
            env:
              JAVA_HOME: "${tool 'Azul JDK 11'}"  # Replace 'Azul JDK 11' with your Java installation tool name
            steps:
              - sh 'echo "Setting JAVA_HOME..."'

    - stage: 'Checkout'
      steps:
        - script:
            name: 'Checkout Git Repository'
            env:
              REPOSITORY_URL: "https://github.com/Sumit10031995/APIFramework.git"
            if:
              branch 'main'  # Adjust branchName as per your repository
            steps:
              - checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'your-credentials-id', url: env.REPOSITORY_URL]]])

    - stage: 'Build'
      steps:
        - script:
            name: 'Build with Maven'
            steps:
              - sh 'mvn clean package'

    - stage: 'Test'
      steps:
        - script:
            name: 'Run Tests'
            steps:
              - sh 'mvn test'

    - stage: 'Publish Reports'
      steps:
        - script:
            name: 'Publish Test Reports'
            steps:
              - sh 'echo "Publishing test reports..."'

    - stage: 'Cleanup'
      steps:
        - script:
            name: 'Perform Cleanup'
            steps:
              - sh 'echo "Performing cleanup..."'

  post:
    always:
      - script:
          name: 'Finalize Pipeline'
          steps:
            - sh 'echo "Pipeline completed."'

    failure:
      - script:
          name: 'Handle Pipeline Failure'
          steps:
            - sh 'echo "Pipeline failed! Check logs for details."'
